doctype html
include /../../static/assets/lib/ldui/pug/ldui.pug
include /../../static/assets/lib/uploadr/uploadr.pug
html
  head
    +css("https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css")
    +css("assets/lib/ldui/ldui.min.css")

  body
    .w-1024.rwd.typeset.heading-contrast.mx-auto.p-4
      h2 uploadr
      p file uploader widgets and express route
      .ldld.text-center: img(src="/assets/img/spinner.svg")
      +scope("uploadr")
        .w-480.mx-auto
          +uploadr-upload
        +uploadr-list

        .w-480.mx-auto.my-4
          .btn.btn-primary.mr-2(ld="upload") Upload
          .btn.btn-primary.mr-2(ld="clear") Clear

    +uploadr-viewer("image-viewer")

    .w-1024.rwd.mx-auto.my-4
      +scope("viewer").d-flex.flex-wrap
        div(ld-each="photo",style="width:300px;height:200px;background-size:cover;background-position:center center;background-repeat:no-repeat")


    +script("https://cdnjs.cloudflare.com/ajax/libs/bootstrap.native/2.0.27/bootstrap-native-v4.min.js")
    +script("assets/lib/ldui/ldui.min.js")
    +script("assets/lib/uploadr/uploadr.js")
    +script("assets/lib/uploadr/viewer.js")
    script: :lsc
      lc = {files: []}
      uploader-native = do
        host: \native
        route: \/d/uploadr
      uploader-imgbb = do
        host: \imgbb
      up = new uploadr do
        root: ld$.find(document, '[ld-scope=uploadr]', 0)
        progress: -> console.log it
        uploader: uploader-native
      up.on \upload.done, ->
        lc.files ++= it
        view.render!
      ldld = new ldLoader root: '.ldld'
      up.on \preview.loading, -> ldld.on!
      up.on \preview.done, -> ldld.off!

      view = new ldView do
        root: ld$.find('[ld-scope=viewer]', 0)
        handler: do
          photo: do
            list: -> lc.files or []
            handle: ({node, data}) ->
              node.style.backgroundImage = "url(#{data.url})"

      count = 0
      viewer = new uploadr.viewer do
        root: '[ld-scope=image-viewer]'
        page: 
          host: window
          fetch-on-scroll: true
          limit: 9
          boundary: 100
          fetch: -> new Promise (res, rej) ->
            res [1,2,3,4,5,6,7,8,9].map ->
              count := count + 1
              {data: "/assets/img/sample/#{it}.jpg", value: count}
      viewer.page.fetch!

