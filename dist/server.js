// Generated by LiveScript 1.6.0
var fs, fsExtra, path, crypto, imgtype, uploadr;
fs = require('fs');
fsExtra = require('fs-extra');
path = require('path');
crypto = require('crypto');
imgtype = require('imgtype');
uploadr = function(opt){
  var folder, rooturl, log, archive, route, handler;
  opt == null && (opt = {});
  folder = opt.folder || 'uploads';
  rooturl = opt.url || folder;
  log = opt.log || function(it){
    return console.log(it);
  };
  archive = function(obj){
    obj == null && (obj = {});
    return new Promise(function(res, rej){
      var ref$, name, target, promise;
      ref$ = [obj.name || '', obj.target || 'main'], name = ref$[0], target = ref$[1];
      promise = obj.buf
        ? Promise.resolve(obj.buf)
        : new Promise(function(res, rej){
          return fs.readFile(obj.path, function(e, buf){
            if (e) {
              return rej(e);
            } else {
              return res(buf);
            }
          });
        });
      return promise.then(function(buf){
        var hk, t1, t2, dir;
        hk = crypto.createHash('sha256').update(buf).digest('hex') + "-" + buf.length.toString(36);
        t1 = hk.substring(0, 5);
        t2 = hk.substring(5, 10);
        hk = hk.substring(10);
        dir = path.join(folder, target, t1, t2);
        return imgtype(buf).then(function(arg$){
          var ext, des, url, ref$;
          ext = arg$.ext;
          des = path.join(dir, hk);
          url = path.join(rooturl, target, t1, t2, hk);
          if (ext) {
            ref$ = [des + "." + ext, url + "." + ext], des = ref$[0], url = ref$[1];
          }
          return fs.exists(des, function(it){
            if (it) {
              res({
                url: url,
                name: name,
                id: hk
              });
            }
            return fsExtra.ensureDir(dir, function(e, b){
              if (e) {
                throw e;
              }
              return fs.writeFile(des, buf, function(e, b){
                if (e) {
                  throw e;
                }
                return res({
                  url: url,
                  name: name,
                  id: hk
                });
              });
            });
          });
        });
      })['catch'](function(err){
        log(err);
        return res({
          name: name
        });
      });
    });
  };
  route = function(req, res, next){
    return handler({
      opt: {},
      req: req,
      res: res
    }).then(function(it){
      return res.send(it);
    })['catch'](function(err){
      if (opt['catch']) {
        return opt['catch'](err, req, res, next);
      } else {
        console.log(err);
        return res.status(500).send();
      }
    });
  };
  handler = function(o){
    var req, res, cfg, files, promises;
    o == null && (o = {});
    req = o.req, res = o.res;
    cfg = o.opt || {};
    files = (req.files || {}).file;
    files = !files
      ? []
      : Array.isArray(files)
        ? files
        : [files];
    if (cfg && cfg.target) {
      files = files.map(function(it){
        return it.target = cfg.target, it;
      });
    }
    promises = files.map(archive).map(function(it){
      return it.then(function(ret){
        return (opt.adopt
          ? opt.adopt(req, ret)
          : Promise.resolve()).then(function(){
          return ret;
        });
      });
    });
    return Promise.all(promises);
  };
  return {
    handler: handler,
    route: route,
    archive: archive
  };
};
module.exports = uploadr;
